from __future__ import print_function
import pygmsh
import os, subprocess

#------------------------------------------------------------------------
class Geometry(pygmsh.built_in.Geometry):
  def __init__(self, **kwargs):
    self.datatype = 'binary'
    self.npartitions = 0
    self.hmean = 1.0
    self.dim = 3
    if 'datatype' in kwargs: self.datatype = kwargs.pop('datatype')
    if 'name' in kwargs: self.name = kwargs.pop('name')
    if 'npartitions' in kwargs: self.npartitions = kwargs.pop('npartitions')
    if 'hmean' in kwargs: self.hmean = kwargs.pop('hmean')
    if 'dim' in kwargs: self.dim = kwargs.pop('dim')
    pygmsh.built_in.Geometry.__init__(self, kwargs)
    self.gmsh_executable = pygmsh.helpers._get_gmsh_exe()
    self.defineGeometry()
#------------------------------------------------------------------------
  def runGeo(self, outdir=None, name=None):
    if outdir is None : outdir = os.getcwd()
    if name is None : name = self.name
    # print("@@@@@@@@ name %s" %name)
    if not os.path.isdir(outdir) : os.mkdir(outdir)
    filenamegeo = os.path.join(outdir,name + '.geo')
    # print("@@@@@@@@ filenamegeo %s" %filenamegeo)
    file = open(filenamegeo, "w")
    # file.write(self.get_code().encode())
    file.write(self.get_code())
    file.close()
  def runGmsh(self, outdir=None, name=None, verbose = False, num_lloyd_steps=3):
    if outdir is None : outdir = os.getcwd()
    if name is None : name = self.name
    filenamegeo = os.path.join(outdir,name + '.geo')
    self.runGeo(outdir, name)
    filenamemsh = os.path.join(outdir,name+'.msh')
    cmd = [self.gmsh_executable, '-'+str(self.dim), filenamegeo, '-o', filenamemsh]
    if self.npartitions>0:
      cmd += ['-part', str(self.npartitions), '-oneFilePerPart']
    if self.datatype != 'ascii':
      cmd += ['-bin']
    if num_lloyd_steps > 0:
      cmd += ['-optimize_lloyd', str(num_lloyd_steps)]
    # print('cmd', ' '.join(cmd))
    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = p.communicate()
    if verbose:
      while True:
        line = p.stdout.readline()
        if not line: break
        print(line, end='')
    if p.returncode != 0:
      raise RuntimeError('Gmsh exited with error (return code %d).' %p.returncode)
    if os.path.isfile("LloydInit.pos"):
      os.remove("LloydInit.pos")
